/*
================Xml配置================	
<bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
	<property name="brokerURL">
      <!—服务器的IP地址，端口默认为：61616-->
		<value>tcp://10.192.15.19:61616</value>
	</property>
</bean>
<bean id="destination" class="org.apache.activemq.command.ActiveMQTopic">
	<constructor-arg index="0">
		<value>TestTopic</value>
	</constructor-arg>
</bean>
<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
	<property name="connectionFactory">
		<ref bean="connectionFactory" />
	</property>
	<property name="defaultDestination">
		<ref bean="destination"/>
	</property>
	<!-- 使用发布/订阅模式时 -->
	<property name="pubSubDomain">
		<value>true</value>
	</property>
	<!-- 等待消息时间（ms） -->
	<property name="receiveTimeout">
		<value>20000</value>
	</property>
</bean>

<!-- 生产者 -->
<bean id="MessageProducer" class="com.cups.process.core.message.MessageProducer">
	<property name="template" ref="jmsTemplate" />
	<property name="destination" ref="destination" />
</bean>

<!-- 消费者 -->
<bean id="MessageConsumer" class="com.cups.process.core.message.MessageConsumer" />

<!-- 配置监听适配器 -->
<bean id="consumerListener"
	class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
	<constructor-arg ref="MessageConsumer" />
	<!-- 配置监听方法 -->
	<property name="defaultListenerMethod" value="onMessage" />
</bean>

<!--  listener container -->
<bean id="topicListenerContainerA" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
	<property name="connectionFactory" ref="connectionFactory" />
	<property name="pubSubDomain" value="true"></property>
	
    <property name="receiveTimeout" value="1"/>  
	<property name="destination" ref="destination" />
	
	<!-- 持久订阅 -->
	<property name="subscriptionDurable" value="true"/>
	<property name="clientId" value="${hostName}"/>  
    <property name="durableSubscriptionName" value="${hostName}"/> 
	
	<property name="messageListener" ref="consumerListener" />
	<property name="taskExecutor" ref="taskExecutor" />  
</bean>

<!--DefaultMessageListenerContainer默认的线程池支持-->  
<bean id="taskExecutor" class="org.springframework.core.task.SimpleAsyncTaskExecutor"/>  

	
	
	================Controller代码================	
	public ModelAndView load(HttpServletRequest request, ModelMap modelMap) {
		String retStr = null;
		try {
			MessageProducer fmpa = (MessageProducer)SpringBeanUtils.getBean("MessageProducer");
			//使用JMS进行信息发送
			String fileName = "test.jsp";
			String formContent = "formContents";
			fmpa.sendMapMessage(fileName, formContent);			retStr = "OK";
		} catch (Exception e) {
			e.printStackTrace();
			modelMap.put("info", "测试数据加载失败"); // 异常信息描述
			modelMap.put("exception", "异常信息" + e.getMessage());// 异常原因
			modelMap.put("suggest", "解决建议");// 解决建议
			return new ModelAndView("commons/exception", modelMap);
		}
		modelMap.put("retStr", retStr);
		return new ModelAndView("test/workFlow", modelMap);
	}

	================Controller代码  消费者接受信息================
	public class MessageConsumer implements MessageListener {
	@Override
	public void onMessage(Message message) {
		if(message instanceof MapMessage){ //接收键值对消息   
			MapMessage mapMessage = (MapMessage)message;   
			try {
				String path = AppPathUtils.getRootPath();
				//将表单内容存储到文件中并将文件存放到指定位置
				String formUrl = path+"/views/business/support/maintenance/"+mapMessage.getString("fileName");
					BufferedWriter out1 = new BufferedWriter(new FileWriter(formUrl));
					out1.write(mapMessage.getString("msgContent"));
					out1.close();
				} catch(IOException e ){
				e.printStackTrace();
				} catch (JMSException e) {
				e.printStackTrace();
				}
			}
		}
	}

	类和方法要和监听器对应起来。	
	
*/
